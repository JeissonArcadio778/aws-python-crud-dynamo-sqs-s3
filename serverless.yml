service: sls-crud-python-dynamodb
frameworkVersion: '3'

provider:
  name: aws
  runtime: python3.9
  region: us-east-1
  profile: default
  stage: dev
  timeout: 5
  memorySize: 128
  environment:
    DYNAMODB_TABLE: ProductsTable
    REGION_NAME: ${self:provider.region}
    SQS_QUEUE_NAME: PendingStockFill
    URL_SQS: "https://sqs.us-east-1.amazonaws.com/788950990295/PendingStockFill"
  
  iam:
    role:
      statements:
        - Effect: Allow
          Action:   
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource: 
              - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}"
        - Effect: Allow
          Action:
            - sqs:*
          Resource:
            - "arn:aws:sqs:us-east-1:788950990295:PendingStockFill"
        - Effect: Allow
          Action:
            - s3:*
          Resource: arn:aws:s3:::*

custom: 
  bucket: buckets-buy-products

functions:

  hello:
    handler: handler.hello

  create_product:
    handler: handler.create_product
    events:
      - http:
          path: products/create
          method: post

  get_product: 
    handler: handler.get_product
    events:
      - http:
          path: products/get/{product_id}
          method: get

  all_product: 
    handler: handler.all_product
    events:
      - http:
          path: products/all
          method: get

  update_product:
    handler: handler.update_product
    events:
      - http:
          path: products/update/{product_id}
          method: put

  delete_product:
    handler: handler.delete_product
    events:
      - http:
          path: product/delete/{product_id}
          method: delete
  
  buy_product:
    handler: handler.buy_product
    events:
      - http:
          path: products/buy
          method: post

  fill_stock:
    handler: handler.fill_stock
    events:
      - sqs: 
          arn: 
            Fn::GetAtt:
                - ${self:provider.environment.SQS_QUEUE_NAME}
                - Arn
          batchSize: 1 # Quantity of SQS Messages to trigger the lambda


resources: 
  Resources: 
    PendingStockFill:
      Type: "AWS::SQS::Queue"
      Properties: 
        QueueName: "PendingStockFill"
    ProductsTable: 
      Type: AWS::DynamoDB::Table
      Properties: 
          TableName: ${self:provider.environment.DYNAMODB_TABLE}
          AttributeDefinitions:
            - AttributeName: id
              AttributeType: S
            # - AttributeName: stock
            #   AttributeType: 'N'
          KeySchema:
            - AttributeName: id
              KeyType: HASH
            # - AttributeName: stock
            #   KeyType: RANGE
          ProvisionedThroughput:
            ReadCapacityUnits: 5
            WriteCapacityUnits: 5
          StreamSpecification:
            StreamViewType: NEW_IMAGE

    


